/*
 * This file is generated by jOOQ.
 */
package tech.yamba.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tech.yamba.db.jooq.Indexes;
import tech.yamba.db.jooq.Keys;
import tech.yamba.db.jooq.Public;
import tech.yamba.db.jooq.tables.records.InstancesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Instances extends TableImpl<InstancesRecord> {

    private static final long serialVersionUID = -1224063404;

    /**
     * The reference instance of <code>public.instances</code>
     */
    public static final Instances INSTANCES = new Instances();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstancesRecord> getRecordType() {
        return InstancesRecord.class;
    }

    /**
     * The column <code>public.instances.id</code>.
     */
    public final TableField<InstancesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('instances_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.instances.autostart</code>.
     */
    public final TableField<InstancesRecord, Boolean> AUTOSTART = createField("autostart", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.instances.host</code>.
     */
    public final TableField<InstancesRecord, String> HOST = createField("host", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.instances.port</code>.
     */
    public final TableField<InstancesRecord, Integer> PORT = createField("port", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.instances.identity</code>.
     */
    public final TableField<InstancesRecord, String> IDENTITY = createField("identity", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.instances.cid</code>.
     */
    public final TableField<InstancesRecord, Integer> CID = createField("cid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.instances.name</code>.
     */
    public final TableField<InstancesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.instances.password</code>.
     */
    public final TableField<InstancesRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.instances</code> table reference
     */
    public Instances() {
        this(DSL.name("instances"), null);
    }

    /**
     * Create an aliased <code>public.instances</code> table reference
     */
    public Instances(String alias) {
        this(DSL.name(alias), INSTANCES);
    }

    /**
     * Create an aliased <code>public.instances</code> table reference
     */
    public Instances(Name alias) {
        this(alias, INSTANCES);
    }

    private Instances(Name alias, Table<InstancesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Instances(Name alias, Table<InstancesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Instances(Table<O> child, ForeignKey<O, InstancesRecord> key) {
        super(child, key, INSTANCES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUTOSTART_INDEX, Indexes.INSTANCES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InstancesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INSTANCES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InstancesRecord> getPrimaryKey() {
        return Keys.INSTANCES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InstancesRecord>> getKeys() {
        return Arrays.<UniqueKey<InstancesRecord>>asList(Keys.INSTANCES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Instances as(String alias) {
        return new Instances(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Instances as(Name alias) {
        return new Instances(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Instances rename(String name) {
        return new Instances(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Instances rename(Name name) {
        return new Instances(name, null);
    }
}
