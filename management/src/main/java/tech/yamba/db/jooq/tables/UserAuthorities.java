/*
 * This file is generated by jOOQ.
 */
package tech.yamba.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tech.yamba.db.jooq.Indexes;
import tech.yamba.db.jooq.Keys;
import tech.yamba.db.jooq.Public;
import tech.yamba.db.jooq.tables.records.UserAuthoritiesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAuthorities extends TableImpl<UserAuthoritiesRecord> {

    private static final long serialVersionUID = -1033094877;

    /**
     * The reference instance of <code>public.user_authorities</code>
     */
    public static final UserAuthorities USER_AUTHORITIES = new UserAuthorities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAuthoritiesRecord> getRecordType() {
        return UserAuthoritiesRecord.class;
    }

    /**
     * The column <code>public.user_authorities.user_id</code>.
     */
    public final TableField<UserAuthoritiesRecord, Short> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.user_authorities.authority_id</code>.
     */
    public final TableField<UserAuthoritiesRecord, Short> AUTHORITY_ID = createField("authority_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>public.user_authorities</code> table reference
     */
    public UserAuthorities() {
        this(DSL.name("user_authorities"), null);
    }

    /**
     * Create an aliased <code>public.user_authorities</code> table reference
     */
    public UserAuthorities(String alias) {
        this(DSL.name(alias), USER_AUTHORITIES);
    }

    /**
     * Create an aliased <code>public.user_authorities</code> table reference
     */
    public UserAuthorities(Name alias) {
        this(alias, USER_AUTHORITIES);
    }

    private UserAuthorities(Name alias, Table<UserAuthoritiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAuthorities(Name alias, Table<UserAuthoritiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserAuthorities(Table<O> child, ForeignKey<O, UserAuthoritiesRecord> key) {
        super(child, key, USER_AUTHORITIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_AUTHORITIES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserAuthoritiesRecord> getPrimaryKey() {
        return Keys.USER_AUTHORITIES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserAuthoritiesRecord>> getKeys() {
        return Arrays.<UniqueKey<UserAuthoritiesRecord>>asList(Keys.USER_AUTHORITIES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserAuthoritiesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserAuthoritiesRecord, ?>>asList(Keys.USER_AUTHORITIES__USER_AUTHORITIES_USER_ID_FKEY, Keys.USER_AUTHORITIES__USER_AUTHORITIES_AUTHORITY_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.USER_AUTHORITIES__USER_AUTHORITIES_USER_ID_FKEY);
    }

    public Authorities authorities() {
        return new Authorities(this, Keys.USER_AUTHORITIES__USER_AUTHORITIES_AUTHORITY_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserAuthorities as(String alias) {
        return new UserAuthorities(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserAuthorities as(Name alias) {
        return new UserAuthorities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAuthorities rename(String name) {
        return new UserAuthorities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAuthorities rename(Name name) {
        return new UserAuthorities(name, null);
    }
}
