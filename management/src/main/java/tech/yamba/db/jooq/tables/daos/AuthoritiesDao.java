/*
 * This file is generated by jOOQ.
 */
package tech.yamba.db.jooq.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import tech.yamba.db.jooq.tables.Authorities;
import tech.yamba.db.jooq.tables.pojos.Authority;
import tech.yamba.db.jooq.tables.records.AuthoritiesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AuthoritiesDao extends DAOImpl<AuthoritiesRecord, Authority, Short> {

    /**
     * Create a new AuthoritiesDao without any configuration
     */
    public AuthoritiesDao() {
        super(Authorities.AUTHORITIES, Authority.class);
    }

    /**
     * Create a new AuthoritiesDao with an attached configuration
     */
    @Autowired
    public AuthoritiesDao(Configuration configuration) {
        super(Authorities.AUTHORITIES, Authority.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Short getId(Authority object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<Authority> fetchById(Short... values) {
        return fetch(Authorities.AUTHORITIES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Authority fetchOneById(Short value) {
        return fetchOne(Authorities.AUTHORITIES.ID, value);
    }

    /**
     * Fetch records that have <code>authority IN (values)</code>
     */
    public List<Authority> fetchByAuthority(String... values) {
        return fetch(Authorities.AUTHORITIES.AUTHORITY, values);
    }
}
